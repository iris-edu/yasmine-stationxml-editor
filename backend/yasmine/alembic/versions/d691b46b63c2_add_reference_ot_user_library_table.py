# ****************************************************************************
#
# This file is part of the yasmine editing tool.
#
# yasmine (Yet Another Station Metadata INformation Editor), a tool to
# create and edit station metadata information in FDSN stationXML format,
# is a common development of IRIS and RESIF.
# Development and addition of new features is shared and agreed between * IRIS and RESIF.
#
#
# Version 1.0 of the software was funded by SAGE, a major facility fully
# funded by the National Science Foundation (EAR-1261681-SAGE),
# development done by ISTI and led by IRIS Data Services.
# Version 2.0 of the software was funded by CNRS and development led by * RESIF.
#
# This program is free software; you can redistribute it
# and/or modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 3 of the License, or (at your option) any later version. *
# This program is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty
# of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Lesser General Public License (GNU-LGPL) for more details. *
# You should have received a copy of the GNU Lesser General Public
# License along with this software. If not, see
# <https://www.gnu.org/licenses/>
#
#
# 2019/10/07 : version 2.0.0 initial commit
#
# ****************************************************************************/


#@PydevCodeAnalysisIgnore
"""add reference ot user_library table

Revision ID: d691b46b63c2
Revises: 4f37fc846eee
Create Date: 2019-11-18 16:57:55.190419

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.orm import Session


# revision identifiers, used by Alembic.
from yasmine.app.models import XmlNodeAttrValModel, XmlNodeInstModel

revision = 'd691b46b63c2'
down_revision = '4f37fc846eee'
branch_labels = None
depends_on = None


def upgrade():

    # ### commands auto generated by Alembic - please adjust! ###
    table = op.create_table('xml_node_instance2',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('code', sa.Text(), nullable=True),
    sa.Column('start_date', sa.DateTime(), nullable=True),
    sa.Column('end_date', sa.DateTime(), nullable=True),
    sa.Column('xml_id', sa.Integer(), nullable=True),
    sa.Column('node_id', sa.Integer(), nullable=False),
    sa.Column('parent_id', sa.Integer(), nullable=True),
    sa.Column('user_library_id', sa.Integer(), nullable=True),

    sa.ForeignKeyConstraint(['xml_id'], ['xml.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['node_id'], ['xml_node.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['parent_id'], ['xml_node_instance.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_library_id'], ['user_library.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_xml_node_instance2_id'), 'xml_node_instance2', ['id'], unique=True)
    # ### end Alembic commands ###
    bind = op.get_bind()
    session = Session(bind=bind)
    query = session.query(
        XmlNodeInstModel.id,
        XmlNodeInstModel.code,
        XmlNodeInstModel.start_date,
        XmlNodeInstModel.end_date,
        XmlNodeInstModel.xml_id,
        XmlNodeInstModel.node_id,
        XmlNodeInstModel.parent_id)
    for row in query:
        session.execute(table.insert(row))
    session.commit()

    op.drop_table('xml_node_instance')
    op.rename_table('xml_node_instance2', 'xml_node_instance')


def downgrade():
    pass
